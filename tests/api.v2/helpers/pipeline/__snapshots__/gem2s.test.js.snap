// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gem2sResponse Starts a QC run when gem2s finishes 1`] = `
Array [
  Array [
    "mockExperimentId",
    Object {
      "processing_config": Object {
        "cellSizeDistribution": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
            "enabled": false,
            "filterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
          },
        },
        "classifier": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "FDR": 0.02,
            },
            "enabled": false,
            "filterSettings": Object {
              "FDR": 0.01,
            },
            "prefiltered": true,
          },
        },
        "configureEmbedding": Object {
          "clusteringSettings": Object {
            "method": "louvain",
            "methodSettings": Object {
              "louvain": Object {
                "resolution": 0.8,
              },
            },
          },
          "embeddingSettings": Object {
            "method": "umap",
            "methodSettings": Object {
              "tsne": Object {
                "learningRate": 200,
                "perplexity": 30,
              },
              "umap": Object {
                "distanceMetric": "cosine",
                "minimumDistance": 0.3,
              },
            },
          },
        },
        "dataIntegration": Object {
          "dataIntegration": Object {
            "method": "harmony",
            "methodSettings": Object {
              "fastmnn": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "harmony": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "seuratv4": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "unisample": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
            },
          },
          "dimensionalityReduction": Object {
            "excludeGeneCategories": Array [],
            "method": "rpca",
            "numPCs": 30,
          },
        },
        "doubletScores": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 0.05,
              "probabilityThreshold": 0.6569474,
            },
            "enabled": true,
            "filterSettings": Object {
              "binStep": 0.02,
              "probabilityThreshold": 0.6569474,
            },
          },
        },
        "mitochondrialContent": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.6,
                  "maxFraction": 0.07181355,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
          },
        },
        "numGenesVsNumUmis": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
          },
        },
      },
    },
  ],
]
`;

exports[`gem2sResponse Starts a QC run when gem2s finishes 2`] = `
Array [
  Array [
    "mockExperimentId",
    Array [],
    "mockAuthJWT",
    "mockJobId",
  ],
]
`;

exports[`gem2sResponse Starts a QC run when gem2s finishes and can duplicate defaultProcessingConfig ignoring entries that arent samples 1`] = `
Array [
  Array [
    "mockExperimentId",
    Object {
      "processing_config": Object {
        "cellSizeDistribution": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
            "enabled": false,
            "filterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
          },
        },
        "classifier": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "FDR": 0.02,
            },
            "enabled": false,
            "filterSettings": Object {
              "FDR": 0.01,
            },
            "prefiltered": true,
          },
        },
        "configureEmbedding": Object {
          "clusteringSettings": Object {
            "method": "louvain",
            "methodSettings": Object {
              "louvain": Object {
                "resolution": 0.8,
              },
            },
          },
          "embeddingSettings": Object {
            "method": "umap",
            "methodSettings": Object {
              "tsne": Object {
                "learningRate": 200,
                "perplexity": 30,
              },
              "umap": Object {
                "distanceMetric": "cosine",
                "minimumDistance": 0.3,
              },
            },
          },
        },
        "dataIntegration": Object {
          "dataIntegration": Object {
            "method": "harmony",
            "methodSettings": Object {
              "fastmnn": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "harmony": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "seuratv4": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "unisample": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
            },
          },
          "dimensionalityReduction": Object {
            "excludeGeneCategories": Array [],
            "method": "rpca",
            "numPCs": 30,
          },
        },
        "doubletScores": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 0.05,
              "probabilityThreshold": 0.6569474,
            },
            "enabled": true,
            "filterSettings": Object {
              "binStep": 0.02,
              "probabilityThreshold": 0.6569474,
            },
          },
          "someStepFlag": true,
        },
        "mitochondrialContent": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.6,
                  "maxFraction": 0.07181355,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
          },
        },
        "numGenesVsNumUmis": Object {
          "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
          },
        },
      },
    },
  ],
]
`;

exports[`gem2sResponse Starts a QC run when gem2s finishes and can duplicate defaultProcessingConfig ignoring entries that arent samples 2`] = `
Array [
  Array [
    "mockExperimentId",
    Array [],
    "mockAuthJWT",
    "mockJobId",
  ],
]
`;

exports[`gem2sResponse Updates the subset experiment when subsetSeurat is notified to have finished 1`] = `
Array [
  Array [
    "8e282f0d-aadb-8032-a334-982a371efd0f",
    "mockSubsetExperimentId",
    Array [
      "old-sample-id-1",
      "old-sample-id-2",
    ],
    Object {
      "old-sample-id-1": "new-sample-id-1",
      "old-sample-id-2": "new-sample-id-2",
    },
  ],
]
`;

exports[`gem2sResponse Updates the subset experiment when subsetSeurat is notified to have finished 2`] = `
Array [
  Array [
    "mockSubsetExperimentId",
    Object {
      "samples_order": undefined,
    },
  ],
]
`;

exports[`gem2sResponse works correctly 1`] = `
Array [
  "ExperimentUpdates-mockExperimentId",
  Object {
    "experimentId": "mockExperimentId",
    "input": Object {},
    "response": Object {},
    "status": Object {
      "status": Object {
        "gem2s": Object {
          "completedSteps": Array [
            "DownloadGem",
          ],
          "error": false,
          "shouldRerun": true,
          "startDate": "2022-05-10T16:30:16.268Z",
          "status": "RUNNING",
          "stopDate": null,
        },
      },
    },
    "type": "gem2s",
  },
]
`;

exports[`startGem2sPipeline works correctly 1`] = `
Array [
  Object {
    "experiment_id": "mockExperimentId",
    "pipeline_type": "gem2s",
  },
  Object {
    "execution_arn": "mockExecutionArn",
    "last_pipeline_params": Object {
      "metadata": Object {
        "Track_1": Array [
          "N.A.",
        ],
      },
      "sampleIds": Array [
        "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e",
      ],
      "sampleNames": Array [
        "WT1",
      ],
      "sampleOptions": Array [
        undefined,
      ],
      "sampleTechnology": "10x",
    },
    "state_machine_arn": "mockStateMachineArn",
  },
]
`;

exports[`startGem2sPipeline works correctly 2`] = `
Array [
  Object {
    "experiment_id": "mockExperimentId",
    "pipeline_type": "qc",
  },
]
`;

exports[`startGem2sPipeline works correctly 3`] = `
Array [
  "mockExperimentId",
  Object {
    "authJWT": "mockAuthJWT",
    "experimentName": "asdsadsada",
    "input": Object {
      "type": "10x",
    },
    "metadata": Object {
      "Track_1": Array [
        "N.A.",
      ],
    },
    "organism": null,
    "projectId": "mockExperimentId",
    "sampleIds": Array [
      "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e",
    ],
    "sampleNames": Array [
      "WT1",
    ],
    "sampleOptions": Object {
      "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {},
    },
    "sampleS3Paths": Object {
      "fc68aefc-c3ca-467f-8589-f1dbaaac1c1e": Object {
        "barcodes10x": "37d9e601-9278-437c-a776-40fe94680833",
        "features10x": "1ee00087-e98a-4390-a3cb-392a3f6d09d8",
        "matrix10x": "68f74995-3689-401a-90e0-145e08049cd5",
      },
    },
  },
  "mockAuthJWT",
]
`;
