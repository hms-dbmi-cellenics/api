// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test for pipeline services Create Gem2s pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create Gem2s pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-gem2s-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Create Gem2s pipeline works 3`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Create QC pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create QC pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-qc-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Create QC pipeline works 3`] = `
Array [
  Array [
    Object {
      "experiment_id": "testExperimentId",
      "pipeline_type": "qc",
    },
    Object {
      "execution_arn": "test-machine",
      "state_machine_arn": "test-machine",
    },
  ],
]
`;

exports[`test for pipeline services Create QC pipeline works 4`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"samples\\":[{\\"sampleUuid\\":\\"oneSample\\",\\"index\\":0},{\\"sampleUuid\\":\\"otherSample\\",\\"index\\":1}],\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Create QC pipeline works: experimentInstance processingConfig update 1`] = `
Array [
  Array [
    "testExperimentId",
    Object {
      "processing_config": Object {
        "cellSizeDistribution": Object {
          "oneSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
            "enabled": false,
            "filterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
          },
          "otherSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
            "enabled": false,
            "filterSettings": Object {
              "binStep": 200,
              "minCellSize": 1044,
            },
          },
        },
        "classifier": Object {
          "oneSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "FDR": 0.01,
            },
            "enabled": false,
            "filterSettings": Object {
              "FDR": 0.01,
            },
            "prefiltered": true,
          },
          "otherSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "FDR": 0.01,
            },
            "enabled": false,
            "filterSettings": Object {
              "FDR": 0.01,
            },
            "prefiltered": true,
          },
        },
        "configureEmbedding": Object {
          "clusteringSettings": Object {
            "method": "louvain",
            "methodSettings": Object {
              "louvain": Object {
                "resolution": 0.8,
              },
            },
          },
          "embeddingSettings": Object {
            "method": "umap",
            "methodSettings": Object {
              "tsne": Object {
                "learningRate": 200,
                "perplexity": 30,
              },
              "umap": Object {
                "distanceMetric": "cosine",
                "minimumDistance": 0.3,
              },
            },
          },
        },
        "dataIntegration": Object {
          "dataIntegration": Object {
            "method": "harmony",
            "methodSettings": Object {
              "fastmnn": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "harmony": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "seuratv4": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
              "unisample": Object {
                "normalisation": "logNormalize",
                "numGenes": 2000,
              },
            },
          },
          "dimensionalityReduction": Object {
            "excludeGeneCategories": Array [],
            "method": "rpca",
            "numPCs": 30,
          },
        },
        "doubletScores": Object {
          "oneSample": Object {
            "defaultFilterSettings": Object {
              "oneSetting": 1,
            },
            "filterSettings": Object {
              "oneSetting": 7,
            },
            "recomputeDoubletScore": true,
          },
          "otherSample": Object {
            "filterSettings": Object {
              "oneSetting": 15,
            },
            "recomputeDoubletScore": true,
          },
        },
        "mitochondrialContent": Object {
          "oneSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
          },
          "otherSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "method": "absoluteThreshold",
              "methodSettings": Object {
                "absoluteThreshold": Object {
                  "binStep": 0.3,
                  "maxFraction": 0.07181329,
                },
              },
            },
          },
        },
        "numGenesVsNumUmis": Object {
          "oneSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
          },
          "otherSample": Object {
            "auto": true,
            "defaultFilterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
            "enabled": true,
            "filterSettings": Object {
              "regressionType": "linear",
              "regressionTypeSettings": Object {
                "linear": Object {
                  "p.level": 0.001,
                },
                "spline": Object {
                  "p.level": 0.001,
                },
              },
            },
          },
        },
      },
    },
  ],
]
`;

exports[`test for pipeline services Create Subset pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create Subset pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Create Subset pipeline works: createStateMachineSpy calls 1`] = `
Array [
  Array [
    Object {
      "definition": "{\\"Comment\\":\\"Subset Pipeline for clusterEnv 'test'\\",\\"StartAt\\":\\"RequestPod\\",\\"States\\":{\\"RequestPod\\":{\\"ResultPath\\":null,\\"Next\\":\\"WaitForPod\\",\\"Comment\\":\\"Send a message through SNS so that the API assigns a pod to the pipeline\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::sns:publish\\",\\"Parameters\\":{\\"TopicArn\\":\\"arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2\\",\\"Message\\":\\"{\\\\\\"taskName\\\\\\":\\\\\\"assignPodToPipeline\\\\\\",\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"apiUrl\\\\\\":\\\\\\"test-public-api-url\\\\\\",\\\\\\"input\\\\\\":{\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"sandboxId\\\\\\":\\\\\\"default\\\\\\",\\\\\\"activityId\\\\\\":\\\\\\"pipeline-test-mock-uuid\\\\\\",\\\\\\"processName\\\\\\":\\\\\\"subset\\\\\\"}}\\",\\"MessageAttributes\\":{\\"type\\":{\\"DataType\\":\\"String\\",\\"StringValue\\":\\"PipelineResponse\\"}}}},\\"WaitForPod\\":{\\"ResultPath\\":null,\\"Next\\":\\"SubsetSeurat\\",\\"Type\\":\\"Map\\",\\"ItemsPath\\":\\"$.retries\\",\\"MaxConcurrency\\":1,\\"Retry\\":[{\\"ErrorEquals\\":[\\"NoPodAssigned\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":13,\\"BackoffRate\\":1.5}],\\"Iterator\\":{\\"StartAt\\":\\"GetAssignedPod\\",\\"States\\":{\\"GetAssignedPod\\":{\\"Next\\":\\"IsPodAssigned\\",\\"Type\\":\\"Task\\",\\"Comment\\":\\"Retrieves first unassigned and running pipeline pod.\\",\\"Resource\\":\\"arn:aws:states:::eks:call\\",\\"Parameters\\":{\\"ClusterName\\":\\"biomage-test\\",\\"CertificateAuthority\\":\\"AAAAAAAAAAA\\",\\"Endpoint\\":\\"https://test-endpoint.me/fgh\\",\\"Method\\":\\"GET\\",\\"Path\\":\\"/api/v1/namespaces/pipeline-test-namespace/pods\\",\\"QueryParameters\\":{\\"labelSelector\\":[\\"type=pipeline,activityId=pipeline-test-mock-uuid\\"]}}},\\"IsPodAssigned\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"Redirects to an error state if the pipeline pod is not assigned yet.\\",\\"Choices\\":[{\\"Variable\\":\\"$.ResponseBody.items[0]\\",\\"IsPresent\\":false,\\"Next\\":\\"NoPodAssigned\\"}],\\"Default\\":\\"ReadyToRun\\"},\\"NoPodAssigned\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"No available and running pipeline pods.\\",\\"Error\\":\\"NoPodAssigned\\"},\\"ReadyToRun\\":{\\"Type\\":\\"Pass\\",\\"End\\":true}}}},\\"SubsetSeurat\\":{\\"Next\\":\\"PrepareExperiment\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid\\",\\"ResultPath\\":null,\\"TimeoutSeconds\\":10800,\\"HeartbeatSeconds\\":90,\\"Parameters\\":{\\"experimentId\\":\\"toExperimentId\\",\\"taskName\\":\\"subsetSeurat\\",\\"processName\\":\\"subset\\",\\"server\\":\\"remoter-server-toExperimentId.pipeline-test-namespace.svc.cluster.local\\",\\"ignoreSslCert\\":false,\\"parentExperimentId\\":\\"fromExperimentId\\",\\"subsetExperimentId\\":\\"toExperimentId\\",\\"cellSetKeys\\":[\\"louvain-1\\",\\"louvain-2\\"],\\"parentProcessingConfig\\":{\\"classifier\\":{\\"oneSample\\":{\\"auto\\":true,\\"enabled\\":false,\\"prefiltered\\":true,\\"filterSettings\\":{\\"FDR\\":0.01},\\"defaultFilterSettings\\":{\\"FDR\\":0.01}},\\"otherSample\\":{\\"auto\\":true,\\"enabled\\":false,\\"prefiltered\\":true,\\"filterSettings\\":{\\"FDR\\":0.01},\\"defaultFilterSettings\\":{\\"FDR\\":0.01}}},\\"doubletScores\\":{\\"oneSample\\":{\\"defaultFilterSettings\\":{\\"oneSetting\\":1},\\"filterSettings\\":{\\"oneSetting\\":7}},\\"otherSample\\":{\\"filterSettings\\":{\\"oneSetting\\":15}}},\\"dataIntegration\\":{\\"dataIntegration\\":{\\"method\\":\\"harmony\\",\\"methodSettings\\":{\\"fastmnn\\":{\\"numGenes\\":2000,\\"normalisation\\":\\"logNormalize\\"},\\"harmony\\":{\\"numGenes\\":2000,\\"normalisation\\":\\"logNormalize\\"},\\"seuratv4\\":{\\"numGenes\\":2000,\\"normalisation\\":\\"logNormalize\\"},\\"unisample\\":{\\"numGenes\\":2000,\\"normalisation\\":\\"logNormalize\\"}}},\\"dimensionalityReduction\\":{\\"method\\":\\"rpca\\",\\"numPCs\\":30,\\"excludeGeneCategories\\":[]}},\\"numGenesVsNumUmis\\":{\\"oneSample\\":{\\"auto\\":true,\\"enabled\\":true,\\"filterSettings\\":{\\"regressionType\\":\\"linear\\",\\"regressionTypeSettings\\":{\\"linear\\":{\\"p.level\\":0.001},\\"spline\\":{\\"p.level\\":0.001}}},\\"defaultFilterSettings\\":{\\"regressionType\\":\\"linear\\",\\"regressionTypeSettings\\":{\\"linear\\":{\\"p.level\\":0.001},\\"spline\\":{\\"p.level\\":0.001}}}},\\"otherSample\\":{\\"auto\\":true,\\"enabled\\":true,\\"filterSettings\\":{\\"regressionType\\":\\"linear\\",\\"regressionTypeSettings\\":{\\"linear\\":{\\"p.level\\":0.001},\\"spline\\":{\\"p.level\\":0.001}}},\\"defaultFilterSettings\\":{\\"regressionType\\":\\"linear\\",\\"regressionTypeSettings\\":{\\"linear\\":{\\"p.level\\":0.001},\\"spline\\":{\\"p.level\\":0.001}}}}},\\"configureEmbedding\\":{\\"embeddingSettings\\":{\\"method\\":\\"umap\\",\\"methodSettings\\":{\\"tsne\\":{\\"perplexity\\":30,\\"learningRate\\":200},\\"umap\\":{\\"distanceMetric\\":\\"cosine\\",\\"minimumDistance\\":0.3}}},\\"clusteringSettings\\":{\\"method\\":\\"louvain\\",\\"methodSettings\\":{\\"louvain\\":{\\"resolution\\":0.8}}}},\\"cellSizeDistribution\\":{\\"oneSample\\":{\\"auto\\":true,\\"enabled\\":false,\\"filterSettings\\":{\\"binStep\\":200,\\"minCellSize\\":1044},\\"defaultFilterSettings\\":{\\"binStep\\":200,\\"minCellSize\\":1044}},\\"otherSample\\":{\\"auto\\":true,\\"enabled\\":false,\\"filterSettings\\":{\\"binStep\\":200,\\"minCellSize\\":1044},\\"defaultFilterSettings\\":{\\"binStep\\":200,\\"minCellSize\\":1044}}},\\"mitochondrialContent\\":{\\"oneSample\\":{\\"auto\\":true,\\"enabled\\":true,\\"filterSettings\\":{\\"method\\":\\"absoluteThreshold\\",\\"methodSettings\\":{\\"absoluteThreshold\\":{\\"binStep\\":0.3,\\"maxFraction\\":0.07181329}}},\\"defaultFilterSettings\\":{\\"method\\":\\"absoluteThreshold\\",\\"methodSettings\\":{\\"absoluteThreshold\\":{\\"binStep\\":0.3,\\"maxFraction\\":0.07181329}}}},\\"otherSample\\":{\\"auto\\":true,\\"enabled\\":true,\\"filterSettings\\":{\\"method\\":\\"absoluteThreshold\\",\\"methodSettings\\":{\\"absoluteThreshold\\":{\\"binStep\\":0.3,\\"maxFraction\\":0.07181329}}},\\"defaultFilterSettings\\":{\\"method\\":\\"absoluteThreshold\\",\\"methodSettings\\":{\\"absoluteThreshold\\":{\\"binStep\\":0.3,\\"maxFraction\\":0.07181329}}}}}}},\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":\\"$.errorInfo\\",\\"Next\\":\\"HandleError\\"}]},\\"PrepareExperiment\\":{\\"Next\\":\\"UploadToAWS\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid\\",\\"ResultPath\\":null,\\"TimeoutSeconds\\":10800,\\"HeartbeatSeconds\\":90,\\"Parameters\\":{\\"experimentId\\":\\"toExperimentId\\",\\"taskName\\":\\"prepareExperiment\\",\\"processName\\":\\"subset\\",\\"server\\":\\"remoter-server-toExperimentId.pipeline-test-namespace.svc.cluster.local\\",\\"ignoreSslCert\\":false,\\"experimentName\\":\\"toExperimentName\\",\\"authJWT\\":\\"mockAuthJWT\\"},\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":\\"$.errorInfo\\",\\"Next\\":\\"HandleError\\"}]},\\"UploadToAWS\\":{\\"Next\\":\\"EndOfPipeline\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid\\",\\"ResultPath\\":null,\\"TimeoutSeconds\\":10800,\\"HeartbeatSeconds\\":90,\\"Parameters\\":{\\"experimentId\\":\\"toExperimentId\\",\\"taskName\\":\\"uploadToAWS\\",\\"processName\\":\\"subset\\",\\"server\\":\\"remoter-server-toExperimentId.pipeline-test-namespace.svc.cluster.local\\",\\"ignoreSslCert\\":false,\\"experimentName\\":\\"toExperimentName\\",\\"authJWT\\":\\"mockAuthJWT\\"},\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":\\"$.errorInfo\\",\\"Next\\":\\"HandleError\\"}]},\\"HandleError\\":{\\"Next\\":\\"MarkAsFailed\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::sns:publish\\",\\"Parameters\\":{\\"TopicArn\\":\\"arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2\\",\\"Message.$\\":\\"States.Format('\\\\\\\\{\\\\\\"taskName\\\\\\":\\\\\\"pipelineError\\\\\\",\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"apiUrl\\\\\\":\\\\\\"test-public-api-url\\\\\\",\\\\\\"input\\\\\\":\\\\\\\\{\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"error\\\\\\":\\\\\\"{}\\\\\\",\\\\\\"taskName\\\\\\":\\\\\\"pipelineError\\\\\\",\\\\\\"sandboxId\\\\\\":\\\\\\"default\\\\\\",\\\\\\"activityId\\\\\\":\\\\\\"pipeline-test-mock-uuid\\\\\\",\\\\\\"processName\\\\\\":\\\\\\"subset\\\\\\"\\\\\\\\}\\\\\\\\}', $.errorInfo.Error)\\",\\"MessageAttributes\\":{\\"type\\":{\\"DataType\\":\\"String\\",\\"StringValue\\":\\"PipelineResponse\\"}}}},\\"MarkAsFailed\\":{\\"Type\\":\\"Fail\\"},\\"EndOfPipeline\\":{\\"Type\\":\\"Pass\\",\\"End\\":true}}}",
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-subset-test-f3880dbb8507da8b0f158c0216a7d7189670e6ca",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "toExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  ],
]
`;

exports[`test for pipeline services Create Subset pipeline works: createStateMachineSpy results 1`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-subset-test-f3880dbb8507da8b0f158c0216a7d7189670e6ca",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "toExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Create copy pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create copy pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Create copy pipeline works: createStateMachineSpy calls 1`] = `
Array [
  Array [
    Object {
      "definition": "{\\"Comment\\":\\"Copy Pipeline for clusterEnv 'test'\\",\\"StartAt\\":\\"RequestPod\\",\\"States\\":{\\"RequestPod\\":{\\"ResultPath\\":null,\\"Next\\":\\"WaitForPod\\",\\"Comment\\":\\"Send a message through SNS so that the API assigns a pod to the pipeline\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::sns:publish\\",\\"Parameters\\":{\\"TopicArn\\":\\"arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2\\",\\"Message\\":\\"{\\\\\\"taskName\\\\\\":\\\\\\"assignPodToPipeline\\\\\\",\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"apiUrl\\\\\\":\\\\\\"test-public-api-url\\\\\\",\\\\\\"input\\\\\\":{\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"sandboxId\\\\\\":\\\\\\"default\\\\\\",\\\\\\"activityId\\\\\\":\\\\\\"pipeline-test-mock-uuid\\\\\\",\\\\\\"processName\\\\\\":\\\\\\"copy\\\\\\"}}\\",\\"MessageAttributes\\":{\\"type\\":{\\"DataType\\":\\"String\\",\\"StringValue\\":\\"PipelineResponse\\"}}}},\\"WaitForPod\\":{\\"ResultPath\\":null,\\"Next\\":\\"CopyS3Objects\\",\\"Type\\":\\"Map\\",\\"ItemsPath\\":\\"$.retries\\",\\"MaxConcurrency\\":1,\\"Retry\\":[{\\"ErrorEquals\\":[\\"NoPodAssigned\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":13,\\"BackoffRate\\":1.5}],\\"Iterator\\":{\\"StartAt\\":\\"GetAssignedPod\\",\\"States\\":{\\"GetAssignedPod\\":{\\"Next\\":\\"IsPodAssigned\\",\\"Type\\":\\"Task\\",\\"Comment\\":\\"Retrieves first unassigned and running pipeline pod.\\",\\"Resource\\":\\"arn:aws:states:::eks:call\\",\\"Parameters\\":{\\"ClusterName\\":\\"biomage-test\\",\\"CertificateAuthority\\":\\"AAAAAAAAAAA\\",\\"Endpoint\\":\\"https://test-endpoint.me/fgh\\",\\"Method\\":\\"GET\\",\\"Path\\":\\"/api/v1/namespaces/pipeline-test-namespace/pods\\",\\"QueryParameters\\":{\\"labelSelector\\":[\\"type=pipeline,activityId=pipeline-test-mock-uuid\\"]}}},\\"IsPodAssigned\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"Redirects to an error state if the pipeline pod is not assigned yet.\\",\\"Choices\\":[{\\"Variable\\":\\"$.ResponseBody.items[0]\\",\\"IsPresent\\":false,\\"Next\\":\\"NoPodAssigned\\"}],\\"Default\\":\\"ReadyToRun\\"},\\"NoPodAssigned\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"No available and running pipeline pods.\\",\\"Error\\":\\"NoPodAssigned\\"},\\"ReadyToRun\\":{\\"Type\\":\\"Pass\\",\\"End\\":true}}}},\\"CopyS3Objects\\":{\\"Next\\":\\"EndOfPipeline\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid\\",\\"ResultPath\\":null,\\"TimeoutSeconds\\":10800,\\"HeartbeatSeconds\\":90,\\"Parameters\\":{\\"experimentId\\":\\"toExperimentId\\",\\"taskName\\":\\"copyS3Objects\\",\\"processName\\":\\"copy\\",\\"server\\":\\"remoter-server-toExperimentId.pipeline-test-namespace.svc.cluster.local\\",\\"ignoreSslCert\\":false,\\"fromExperimentId\\":\\"fromExperimentId\\",\\"toExperimentId\\":\\"toExperimentId\\",\\"sampleIdsMap\\":{\\"originalSampleId1\\":\\"clonedSampleId1\\",\\"originalSampleId2\\":\\"clonedSampleId2\\"}},\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":\\"$.errorInfo\\",\\"Next\\":\\"HandleError\\"}]},\\"HandleError\\":{\\"Next\\":\\"MarkAsFailed\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::sns:publish\\",\\"Parameters\\":{\\"TopicArn\\":\\"arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2\\",\\"Message.$\\":\\"States.Format('\\\\\\\\{\\\\\\"taskName\\\\\\":\\\\\\"pipelineError\\\\\\",\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"apiUrl\\\\\\":\\\\\\"test-public-api-url\\\\\\",\\\\\\"input\\\\\\":\\\\\\\\{\\\\\\"experimentId\\\\\\":\\\\\\"toExperimentId\\\\\\",\\\\\\"error\\\\\\":\\\\\\"{}\\\\\\",\\\\\\"taskName\\\\\\":\\\\\\"pipelineError\\\\\\",\\\\\\"sandboxId\\\\\\":\\\\\\"default\\\\\\",\\\\\\"activityId\\\\\\":\\\\\\"pipeline-test-mock-uuid\\\\\\",\\\\\\"processName\\\\\\":\\\\\\"copy\\\\\\"\\\\\\\\}\\\\\\\\}', $.errorInfo.Error)\\",\\"MessageAttributes\\":{\\"type\\":{\\"DataType\\":\\"String\\",\\"StringValue\\":\\"PipelineResponse\\"}}}},\\"MarkAsFailed\\":{\\"Type\\":\\"Fail\\"},\\"EndOfPipeline\\":{\\"Type\\":\\"Pass\\",\\"End\\":true}}}",
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-copy-test-f3880dbb8507da8b0f158c0216a7d7189670e6ca",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "toExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  ],
]
`;

exports[`test for pipeline services Create copy pipeline works: createStateMachineSpy results 1`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-copy-test-f3880dbb8507da8b0f158c0216a7d7189670e6ca",
      "roleArn": "arn:aws:iam::000000000000:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "toExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Parses QC processingConfig correctly 1`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "Comment": "QC Pipeline for clusterEnv 'test'",
      "StartAt": "RequestPod",
      "States": Object {
        "CellSizeDistributionFilterMap": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "CellSizeDistributionFilter",
            "States": Object {
              "CellSizeDistributionFilter": Object {
                "End": true,
                "HeartbeatSeconds": 90,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "auto": true,
                      "enabled": false,
                      "filterSettings": Object {
                        "binStep": 200,
                        "minCellSize": 1044,
                      },
                    },
                    "otherSample": Object {
                      "auto": true,
                      "enabled": false,
                      "filterSettings": Object {
                        "binStep": 200,
                        "minCellSize": 1044,
                      },
                    },
                  },
                  "experimentId": "testExperimentId",
                  "ignoreSslCert": false,
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "cellSizeDistribution",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "MitochondrialContentFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "ClassifierFilterMap": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "ClassifierFilter",
            "States": Object {
              "ClassifierFilter": Object {
                "End": true,
                "HeartbeatSeconds": 90,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "auto": true,
                      "enabled": false,
                      "filterSettings": Object {
                        "FDR": 0.01,
                      },
                      "prefiltered": true,
                    },
                    "otherSample": Object {
                      "auto": true,
                      "enabled": false,
                      "filterSettings": Object {
                        "FDR": 0.01,
                      },
                      "prefiltered": true,
                    },
                  },
                  "experimentId": "testExperimentId",
                  "ignoreSslCert": false,
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "classifier",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "CellSizeDistributionFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "ConfigureEmbedding": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "HeartbeatSeconds": 90,
          "Next": "EndOfPipeline",
          "Parameters": Object {
            "config": Object {
              "clusteringSettings": Object {
                "method": "louvain",
                "methodSettings": Object {
                  "louvain": Object {
                    "resolution": 0.8,
                  },
                },
              },
              "embeddingSettings": Object {
                "method": "umap",
                "methodSettings": Object {
                  "tsne": Object {
                    "learningRate": 200,
                    "perplexity": 30,
                  },
                  "umap": Object {
                    "distanceMetric": "cosine",
                    "minimumDistance": 0.3,
                  },
                },
              },
            },
            "experimentId": "testExperimentId",
            "ignoreSslCert": false,
            "processName": "qc",
            "sampleUuid": "",
            "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
            "taskName": "configureEmbedding",
            "uploadCountMatrix": false,
          },
          "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
          "ResultPath": null,
          "TimeoutSeconds": 10800,
          "Type": "Task",
        },
        "DataIntegration": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "HeartbeatSeconds": 90,
          "Next": "ConfigureEmbedding",
          "Parameters": Object {
            "config": Object {
              "dataIntegration": Object {
                "method": "harmony",
                "methodSettings": Object {
                  "fastmnn": Object {
                    "normalisation": "logNormalize",
                    "numGenes": 2000,
                  },
                  "harmony": Object {
                    "normalisation": "logNormalize",
                    "numGenes": 2000,
                  },
                  "seuratv4": Object {
                    "normalisation": "logNormalize",
                    "numGenes": 2000,
                  },
                  "unisample": Object {
                    "normalisation": "logNormalize",
                    "numGenes": 2000,
                  },
                },
              },
              "dimensionalityReduction": Object {
                "excludeGeneCategories": Array [],
                "method": "rpca",
                "numPCs": 30,
              },
            },
            "experimentId": "testExperimentId",
            "ignoreSslCert": false,
            "processName": "qc",
            "sampleUuid": "",
            "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
            "taskName": "dataIntegration",
            "uploadCountMatrix": true,
          },
          "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
          "ResultPath": null,
          "TimeoutSeconds": 10800,
          "Type": "Task",
        },
        "DoubletScoresFilterMap": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "DoubletScoresFilter",
            "States": Object {
              "DoubletScoresFilter": Object {
                "End": true,
                "HeartbeatSeconds": 90,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "filterSettings": Object {
                        "oneSetting": 7,
                      },
                      "recomputeDoubletScore": true,
                    },
                    "otherSample": Object {
                      "filterSettings": Object {
                        "oneSetting": 15,
                      },
                      "recomputeDoubletScore": true,
                    },
                  },
                  "experimentId": "testExperimentId",
                  "ignoreSslCert": false,
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "doubletScores",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "DataIntegration",
          "ResultPath": null,
          "Type": "Map",
        },
        "EndOfPipeline": Object {
          "End": true,
          "Type": "Pass",
        },
        "HandleError": Object {
          "Next": "MarkAsFailed",
          "Parameters": Object {
            "Message.$": "States.Format('\\\\{\\"taskName\\":\\"pipelineError\\",\\"experimentId\\":\\"testExperimentId\\",\\"apiUrl\\":\\"test-public-api-url\\",\\"input\\":\\\\{\\"experimentId\\":\\"testExperimentId\\",\\"error\\":\\"{}\\",\\"taskName\\":\\"pipelineError\\",\\"sandboxId\\":\\"default\\",\\"activityId\\":\\"pipeline-test-mock-uuid\\",\\"processName\\":\\"qc\\"\\\\}\\\\}', $.errorInfo.Error)",
            "MessageAttributes": Object {
              "type": Object {
                "DataType": "String",
                "StringValue": "PipelineResponse",
              },
            },
            "TopicArn": "arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2",
          },
          "Resource": "arn:aws:states:::sns:publish",
          "Type": "Task",
        },
        "MarkAsFailed": Object {
          "Type": "Fail",
        },
        "MitochondrialContentFilterMap": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "MitochondrialContentFilter",
            "States": Object {
              "MitochondrialContentFilter": Object {
                "End": true,
                "HeartbeatSeconds": 90,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "auto": true,
                      "enabled": true,
                      "filterSettings": Object {
                        "method": "absoluteThreshold",
                        "methodSettings": Object {
                          "absoluteThreshold": Object {
                            "binStep": 0.3,
                            "maxFraction": 0.07181329,
                          },
                        },
                      },
                    },
                    "otherSample": Object {
                      "auto": true,
                      "enabled": true,
                      "filterSettings": Object {
                        "method": "absoluteThreshold",
                        "methodSettings": Object {
                          "absoluteThreshold": Object {
                            "binStep": 0.3,
                            "maxFraction": 0.07181329,
                          },
                        },
                      },
                    },
                  },
                  "experimentId": "testExperimentId",
                  "ignoreSslCert": false,
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "mitochondrialContent",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "NumGenesVsNumUmisFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "NumGenesVsNumUmisFilterMap": Object {
          "Catch": Array [
            Object {
              "ErrorEquals": Array [
                "States.ALL",
              ],
              "Next": "HandleError",
              "ResultPath": "$.errorInfo",
            },
          ],
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "NumGenesVsNumUmisFilter",
            "States": Object {
              "NumGenesVsNumUmisFilter": Object {
                "End": true,
                "HeartbeatSeconds": 90,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "auto": true,
                      "enabled": true,
                      "filterSettings": Object {
                        "regressionType": "linear",
                        "regressionTypeSettings": Object {
                          "linear": Object {
                            "p.level": 0.001,
                          },
                          "spline": Object {
                            "p.level": 0.001,
                          },
                        },
                      },
                    },
                    "otherSample": Object {
                      "auto": true,
                      "enabled": true,
                      "filterSettings": Object {
                        "regressionType": "linear",
                        "regressionTypeSettings": Object {
                          "linear": Object {
                            "p.level": 0.001,
                          },
                          "spline": Object {
                            "p.level": 0.001,
                          },
                        },
                      },
                    },
                  },
                  "experimentId": "testExperimentId",
                  "ignoreSslCert": false,
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "numGenesVsNumUmis",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:000000000000:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "DoubletScoresFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "RequestPod": Object {
          "Comment": "Send a message through SNS so that the API assigns a pod to the pipeline",
          "Next": "WaitForPod",
          "Parameters": Object {
            "Message": "{\\"taskName\\":\\"assignPodToPipeline\\",\\"experimentId\\":\\"testExperimentId\\",\\"apiUrl\\":\\"test-public-api-url\\",\\"input\\":{\\"experimentId\\":\\"testExperimentId\\",\\"sandboxId\\":\\"default\\",\\"activityId\\":\\"pipeline-test-mock-uuid\\",\\"processName\\":\\"qc\\"}}",
            "MessageAttributes": Object {
              "type": Object {
                "DataType": "String",
                "StringValue": "PipelineResponse",
              },
            },
            "TopicArn": "arn:aws:sns:eu-west-1:000000000000:work-results-test-default-v2",
          },
          "Resource": "arn:aws:states:::sns:publish",
          "ResultPath": null,
          "Type": "Task",
        },
        "WaitForPod": Object {
          "ItemsPath": "$.retries",
          "Iterator": Object {
            "StartAt": "GetAssignedPod",
            "States": Object {
              "GetAssignedPod": Object {
                "Comment": "Retrieves first unassigned and running pipeline pod.",
                "Next": "IsPodAssigned",
                "Parameters": Object {
                  "CertificateAuthority": "AAAAAAAAAAA",
                  "ClusterName": "biomage-test",
                  "Endpoint": "https://test-endpoint.me/fgh",
                  "Method": "GET",
                  "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
                  "QueryParameters": Object {
                    "labelSelector": Array [
                      "type=pipeline,activityId=pipeline-test-mock-uuid",
                    ],
                  },
                },
                "Resource": "arn:aws:states:::eks:call",
                "Type": "Task",
              },
              "IsPodAssigned": Object {
                "Choices": Array [
                  Object {
                    "IsPresent": false,
                    "Next": "NoPodAssigned",
                    "Variable": "$.ResponseBody.items[0]",
                  },
                ],
                "Comment": "Redirects to an error state if the pipeline pod is not assigned yet.",
                "Default": "ReadyToRun",
                "Type": "Choice",
              },
              "NoPodAssigned": Object {
                "Cause": "No available and running pipeline pods.",
                "Error": "NoPodAssigned",
                "Type": "Fail",
              },
              "ReadyToRun": Object {
                "End": true,
                "Type": "Pass",
              },
            },
          },
          "MaxConcurrency": 1,
          "Next": "ClassifierFilterMap",
          "ResultPath": null,
          "Retry": Array [
            Object {
              "BackoffRate": 1.5,
              "ErrorEquals": Array [
                "NoPodAssigned",
              ],
              "IntervalSeconds": 1,
              "MaxAttempts": 13,
            },
          ],
          "Type": "Map",
        },
      },
    },
  },
]
`;
